// js/views/adminViews.js
import * as store from '../store.js';
import * as auth from '../auth.js';
import { t } from '../i18n.js';
import { render, toggleAdminSidebar, renderTemporaryMessage, formatDateTime, destroyAllCharts, destroyChart } from './common.js';

// Chart Management: Keep chart instances local to this module
let activeAdminCharts = {}; // Use a local object for this view's charts
function destroyAdminChart(chartId) { if (activeAdminCharts[chartId]) { try { activeAdminCharts[chartId].destroy(); } catch (e) { console.error(`Error destroying ${chartId}:`, e); } finally { delete activeAdminCharts[chartId]; } } }
function destroyAllAdminCharts() { Object.keys(activeAdminCharts).forEach(destroyAdminChart); }

// Helper function to render "No Data" message on a canvas
function renderNoData(canvasId, messageKey) { /* ... (keep existing) ... */ try { const canvas = document.getElementById(canvasId); if (canvas?.getContext) { const ctx = canvas.getContext('2d'); ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.save(); ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; ctx.fillStyle = '#6c757d'; ctx.font = '16px "Poppins", sans-serif'; const message = t(messageKey, {}, 'No data available'); ctx.fillText(message, canvas.width / 2, canvas.height / 2); ctx.restore(); console.log(`[Chart] Rendered '${message}' on canvas #${canvasId}`); } else { console.warn(`[Chart] Canvas element #${canvasId} not found for renderNoData.`); } } catch (e) { console.error(`[Chart] Error in renderNoData for canvas #${canvasId}:`, e); } }

// Chart Initialization Function (Admin Dashboard)
function initializeAdminCharts(userCounts, coursesPerProvider, topCourses) { /* ... (keep existing) ... */ console.log("[Charts] InitializeAdminCharts START"); console.log("[Charts] Data Received:", JSON.parse(JSON.stringify({ userCounts, coursesPerProvider, topCourses }))); try { if (typeof Chart === 'undefined') { throw new Error("Chart.js library is not loaded!"); } const noDataKey = 'dashboardAdminNoData'; const validUserCounts = userCounts && typeof userCounts === 'object' && typeof userCounts.total === 'number'; const validCppData = coursesPerProvider && Array.isArray(coursesPerProvider.labels) && Array.isArray(coursesPerProvider.data); const validTopCourses = topCourses && Array.isArray(topCourses.labels) && Array.isArray(topCourses.data); console.log("[Charts] Data Validity:", { validUserCounts, validCppData, validTopCourses }); const userRoleCtx = document.getElementById('userRoleChart')?.getContext('2d'); const topCoursesCtx = document.getElementById('topCoursesChart')?.getContext('2d'); const cppCtx = document.getElementById('coursesPerProviderChart')?.getContext('2d'); destroyAdminChart('userRoleChart'); if (userRoleCtx && validUserCounts && (userCounts.client > 0 || userCounts.provider > 0 || userCounts.admin > 0)) { const chartData = { labels: [t('roleClient'), t('roleProvider'), t('roleAdmin')], datasets: [{ label: t('userRole'), data: [userCounts.client || 0, userCounts.provider || 0, userCounts.admin || 0], backgroundColor: ['rgba(var(--bs-primary-rgb), 0.7)', 'rgba(var(--app-secondary-rgb), 0.7)', 'rgba(108, 117, 125, 0.7)'], borderColor: '#fff', borderWidth: 2, hoverOffset: 8 }] }; console.log("[Charts] User Role Chart - Preparing with data:", chartData); try { activeAdminCharts['userRoleChart'] = new Chart(userRoleCtx, { type: 'doughnut', data: chartData, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { padding: 15, usePointStyle: true } }, tooltip: { callbacks: { label: ctx => ` ${ctx.label}: ${ctx.parsed}` } } }, cutout: '60%' } }); console.log("[Charts] User Role Chart - Instance CREATED."); } catch (e) { console.error("[Charts] Error creating User Role Chart INSTANCE:", e); renderNoData('userRoleChart', 'errorLoadingData'); } } else { console.log("[Charts] User Role Chart - Conditions not met. Rendering 'No Data' or Error."); if (userRoleCtx) renderNoData('userRoleChart', !validUserCounts ? 'errorLoadingData' : noDataKey); else console.warn("[Charts] User Role Chart canvas context not found."); } destroyAdminChart('topCoursesChart'); if (topCoursesCtx && validTopCourses && topCourses.labels.length > 0 && topCourses.data.length > 0) { const chartData = { labels: topCourses.labels.map(l => (l.length > 25 ? l.substring(0, 22) + '...' : l)), datasets: [{ label: t('dashboardAdminCardEnrollmentsTitle'), data: topCourses.data, backgroundColor: 'rgba(var(--bs-info-rgb), 0.6)', borderColor: 'rgba(var(--bs-info-rgb), 1)', borderWidth: 1, borderRadius: 4, borderSkipped: false }] }; console.log("[Charts] Top Courses Chart - Preparing with data:", chartData); try { activeAdminCharts['topCoursesChart'] = new Chart(topCoursesCtx, { type: 'bar', data: chartData, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, ticks: { precision: 0 } }, x: { ticks: { display: true, autoSkip: true, maxRotation: 0 } } }, plugins: { legend: { display: false }, tooltip: { callbacks: { title: (ti) => ti[0] && topCourses.labels[ti[0].dataIndex], label: ctx => ` ${t('dashboardAdminCardEnrollmentsTitle')}: ${ctx.parsed.y}` } } } } }); console.log("[Charts] Top Courses Chart - Instance CREATED."); } catch (e) { console.error("[Charts] Error creating Top Courses Chart INSTANCE:", e); renderNoData('topCoursesChart', 'errorLoadingData'); } } else { console.log("[Charts] Top Courses Chart - Conditions not met. Rendering 'No Data' or Error."); if (topCoursesCtx) renderNoData('topCoursesChart', !validTopCourses ? 'errorLoadingData' : noDataKey); else console.warn("[Charts] Top Courses Chart canvas context not found."); } destroyAdminChart('coursesPerProviderChart'); if (cppCtx && validCppData && coursesPerProvider.labels.length > 0 && coursesPerProvider.data.length > 0) { const chartData = { labels: coursesPerProvider.labels, datasets: [{ label: `# ${t('dashboardAdminCardCoursesTitle')}`, data: coursesPerProvider.data, backgroundColor: 'rgba(var(--app-secondary-rgb), 0.6)', borderColor: 'rgba(var(--app-secondary-rgb), 1)', borderWidth: 1, borderRadius: 4, borderSkipped: false }] }; console.log("[Charts] Courses Per Provider Chart - Preparing with data:", chartData); try { activeAdminCharts['coursesPerProviderChart'] = new Chart(cppCtx, { type: 'bar', data: chartData, options: { indexAxis: 'y', responsive: true, maintainAspectRatio: false, scales: { x: { beginAtZero: true, ticks: { precision: 0 } }, y: { ticks: { autoSkip: false, padding: 5 } } }, plugins: { legend: { display: false }, tooltip: { callbacks: { label: ctx => ` ${t('dashboardAdminCardCoursesTitle')}: ${ctx.parsed.x}` } } } } }); console.log("[Charts] Courses Per Provider Chart - Instance CREATED."); } catch (e) { console.error("[Charts] Error creating Courses Per Provider Chart INSTANCE:", e); renderNoData('coursesPerProviderChart', 'errorLoadingData'); } } else { console.log("[Charts] Courses Per Provider Chart - Conditions not met. Rendering 'No Data' or Error."); if (cppCtx) renderNoData('coursesPerProviderChart', !validCppData ? 'errorLoadingData' : noDataKey); else console.warn("[Charts] Courses Per Provider Chart canvas context not found."); } } catch (chartInitError) { console.error("[Charts] General error during chart initialization:", chartInitError); ['userRoleChart', 'topCoursesChart', 'coursesPerProviderChart'].forEach(id => renderNoData(id, 'errorLoadingData')); } console.log("[Charts] InitializeAdminCharts END"); }

// --- Admin Dashboard - Render Function ---
export function renderAdminDashboard() {
    console.log("[renderAdminDashboard] Function START");
    destroyAllAdminCharts();

    let userCounts, coursesPerProvider, topCoursesData;

    try {
        toggleAdminSidebar(true);
        console.log("[renderAdminDashboard] Sidebar toggled.");

        // --- STEP 1: Render placeholder ---
        console.log("[renderAdminDashboard] STEP 1: Rendering initial placeholder...");
        render(`
            <div data-page-title-key="dashboardAdminTitle"></div>
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom"> <h1 class="h2"><i class="bi bi-grid-1x2-fill me-2"></i>${t('dashboardAdminTitle')}</h1> </div>
            <div id="admin-dash-content-area"> <div class="d-flex justify-content-center align-items-center p-5"> <div class="spinner-border text-primary" role="status"><span class="visually-hidden">${t('loading')}</span></div> <span class="ms-3 text-muted">${t('loading')}</span> </div> </div>
        `, true, false);
        console.log("[renderAdminDashboard] STEP 1: Initial placeholder rendered.");

        // --- STEP 2: Fetch data & Build HTML ---
        let fullContentHtml = '';
        let dataFetchedSuccessfully = false;
        try {
             console.log("[renderAdminDashboard] STEP 2/3: Fetching data and building HTML...");
             // Fetch data
             userCounts = store.getUserCountsByRole() || { admin: 0, provider: 0, client: 0, total: 0, unknown: 0 };
             const courseCountData = store.getCourses('all') || [];
             const pendingCourses = courseCountData.filter(c => c?.status === 'pending');
             const approvedCourses = courseCountData.filter(c => c?.status === 'approved');

             // Calculate stats
             const totalRevenue = approvedCourses.reduce((sum, c) => sum + ((parseFloat(c?.price) || 0) * (c?.enrolledStudentIds?.length || 0)), 0);
             const platformFee = totalRevenue * 0.10; // <<< Calculate 10% fee
             const totalApprovedEnrollments = approvedCourses.reduce((sum, c) => sum + (c?.enrolledStudentIds?.length || 0), 0);
             const enrollmentStats = { totalEnrollments: totalApprovedEnrollments, averageEnrollments: approvedCourses.length > 0 ? (totalApprovedEnrollments / approvedCourses.length) : 0 };
             const paidApprovedCourses = approvedCourses.filter(c=> c && parseFloat(c.price) > 0);
             let totalPaidPriceSum = paidApprovedCourses.reduce((sum, c) => sum + (parseFloat(c.price) || 0), 0);
             const priceStats = { averagePrice: paidApprovedCourses.length > 0 ? totalPaidPriceSum / paidApprovedCourses.length : 0, freeCount: approvedCourses.filter(c => !c?.price || parseFloat(c.price) <= 0).length, paidCount: paidApprovedCourses.length, percentFree: approvedCourses.length > 0 ? (approvedCourses.filter(c => !c?.price || parseFloat(c.price) <= 0).length / approvedCourses.length) * 100 : 0, totalApproved: approvedCourses.length };
             topCoursesData = store.getTopEnrolledCourses(5) || {labels:[], data:[]};
             coursesPerProvider = store.getCoursesPerProviderData() || {labels:[], data:[]};

             dataFetchedSuccessfully = true;
             console.log("[renderAdminDashboard] STEP 2: Data fetch/calculation complete. Fee:", platformFee);

            // --- Build Pending Courses Table ---
            let pendingCoursesHtml = ''; try { /* ... (same as before) ... */ if (pendingCourses.length > 0) { pendingCoursesHtml = pendingCourses.map(course => { if (!course || !course.id) return ''; const provider = store.findUserById(course.providerId); const createdDate = formatDateTime(course.createdAt); const title = course.title || t('untitledCourse'); const providerName = provider ? provider.username : t('unknownProvider'); return `<tr><td><a href="#course-detail/${course.id}" title="${t('viewAction')}">${title}</a></td><td>${providerName}</td><td>${createdDate}</td><td class="text-end"><button class="btn btn-sm btn-success approve-course-button me-1" data-course-id="${course.id}" title="${t('adminApproveAction', {}, 'Approve')}"><i class="bi bi-check-lg"></i> <span class="d-none d-md-inline">${t('adminApproveAction', {}, 'Approve')}</span></button><button class="btn btn-sm btn-danger reject-course-button" data-course-id="${course.id}" title="${t('adminRejectAction', {}, 'Reject')}"><i class="bi bi-x-lg"></i> <span class="d-none d-md-inline">${t('adminRejectAction', {}, 'Reject')}</span></button></td></tr>`; }).join(''); } else { pendingCoursesHtml = `<tr><td colspan="4" class="text-center text-muted p-3">${t('adminNoPendingCourses', {}, 'No courses awaiting approval.')}</td></tr>`; } } catch (htmlError) { console.error("[renderAdminDashboard] Error building pending courses HTML:", htmlError); pendingCoursesHtml = `<tr><td colspan="4" class="text-center text-danger p-3">Error loading pending courses list.</td></tr>`; }
            const pendingCoursesTable = `<div class="card shadow-sm mb-4"><div class="card-header bg-warning-subtle d-flex justify-content-between align-items-center"><h5 class="mb-0"><i class="bi bi-hourglass-split me-2"></i>${t('adminPendingCoursesTitle', {}, 'Pending Course Approvals')}</h5><span class="badge bg-warning text-dark rounded-pill">${pendingCourses.length}</span></div><div id="course-action-alert-pending" class="alert d-none m-0 rounded-0 border-0 border-bottom" role="alert"></div><div class="table-responsive"><table class="table table-striped table-hover mb-0"><thead><tr><th>${t('adminCoursesHeaderTitle', {}, 'Title')}</th><th>${t('adminCoursesHeaderProvider', {}, 'Teacher')}</th><th>${t('adminCoursesHeaderCreated', {}, 'Submitted')}</th><th class="text-end">${t('adminCoursesHeaderActions', {}, 'Actions')}</th></tr></thead><tbody>${pendingCoursesHtml}</tbody></table></div></div>`;

            // --- Build Stats Cards ---
            // *** CHANGE: Adjusted grid and added Platform Fee card ***
            const courseCardSubtitle = t('adminCoursesCardSubtitleModified', { paid: priceStats.paidCount ?? 0, total: priceStats.totalApproved ?? 0 }, `${priceStats.paidCount ?? 0} Paid / ${priceStats.totalApproved ?? 0} Total Approved`);
            const statsHtml = `
                <h4 class="mb-3 text-muted fw-light">${t('adminApprovedStatsTitle', {}, 'Approved Course Statistics')}</h4>
                <div class="row g-3 mb-4">
                    <div class="col-lg-4 col-md-6"><div class="stat-card stat-card-users shadow-sm"> <div class="stat-icon"><i class="bi bi-people-fill"></i></div> <h5>${t('dashboardAdminCardUsersTitle')}</h5> <div class="stat-value">${userCounts.total ?? 0}</div> <small>${t('dashboardAdminCardUsersSubtitle', { client: userCounts.client ?? 0, provider: userCounts.provider ?? 0, admin: userCounts.admin ?? 0 })}</small> </div></div>
                    <div class="col-lg-4 col-md-6"><div class="stat-card stat-card-courses shadow-sm"> <div class="stat-icon"><i class="bi bi-journal-bookmark-fill"></i></div> <h5>${t('dashboardAdminCardApprovedCoursesTitle', {}, 'Approved Courses')}</h5> <div class="stat-value">${priceStats.totalApproved}</div> <small>${courseCardSubtitle}</small> </div></div>
                    <div class="col-lg-4 col-md-6"><div class="stat-card shadow-sm" style="background: linear-gradient(135deg, #0dcaf0, #5bc0de);"> <div class="stat-icon"><i class="bi bi-person-check-fill"></i></div> <h5>${t('dashboardAdminCardEnrollmentsTitle')}</h5> <div class="stat-value">${enrollmentStats.totalEnrollments ?? 0}</div> <small>${t('dashboardAdminCardEnrollmentsSubtitle', { avg: (enrollmentStats.averageEnrollments ?? 0).toFixed(1) })}</small> </div></div>
                    <div class="col-lg-4 col-md-6"><div class="stat-card stat-card-revenue shadow-sm"> <div class="stat-icon"><i class="bi bi-cash-coin"></i></div> <h5>${t('dashboardAdminCardRevenueTitle')}</h5> <div class="stat-value">${(totalRevenue ?? 0).toFixed(0)} ${t('currencySymbol', {}, 'MAD')}</div> <small>${t('dashboardAdminCardRevenueSubtitle')}</small> </div></div>
                     <div class="col-lg-4 col-md-6"><div class="stat-card shadow-sm" style="background: linear-gradient(135deg, #6c757d, #adb5bd);"> <div class="stat-icon"><i class="bi bi-building"></i></div> <h5>${t('dashboardAdminCardPlatformFeeTitle', {}, 'Platform Fee (Est.)')}</h5> <div class="stat-value">${(platformFee ?? 0).toFixed(0)} ${t('currencySymbol', {}, 'MAD')}</div> <small>${t('dashboardAdminCardPlatformFeeSubtitle', {}, 'Est. 10% of Revenue')}</small> </div></div>
                      <div class="col-lg-4 col-md-6"></div> 
                </div>`;

            // --- Build Charts HTML ---
            // *** CHANGE: Removed the "% Free Courses" list item ***
            const chartsHtml = `
                <div class="row g-4">
                    <div class="col-lg-4"> <div class="card shadow-sm mb-4 h-100"> <div class="card-header"><i class="bi bi-graph-up me-2"></i>${t('dashboardAdminQuickStatsTitle')}</div> <div class="card-body"> <ul class="list-group list-group-flush">
                         <li class="list-group-item d-flex justify-content-between align-items-center px-0 border-0">${t('dashboardAdminStatAvgPrice')}<span class="badge bg-success-subtle text-success-emphasis rounded-pill fs-6">${(priceStats.averagePrice ?? 0).toFixed(0)} ${t('currencySymbol', {}, 'MAD')}</span></li>
                         <li class="list-group-item d-flex justify-content-between align-items-center px-0 border-0">${t('dashboardAdminStatAvgEnroll')}<span class="badge bg-info-subtle text-info-emphasis rounded-pill fs-6">${(enrollmentStats.averageEnrollments ?? 0).toFixed(1)}</span></li>
                         <li class="list-group-item d-flex justify-content-between align-items-center px-0 border-0">${t('dashboardAdminStatProviders')}<span class="badge bg-secondary-subtle text-secondary-emphasis rounded-pill fs-6">${userCounts.provider ?? 0}</span></li>
                    </ul> </div> </div> </div>
                    <div class="col-lg-4"><div class="card shadow-sm mb-4 h-100"><div class="card-header">${t('dashboardAdminChartUserRoleTitle')}</div><div class="card-body d-flex justify-content-center align-items-center"><div class="chart-container" style="height: 260px; max-width: 320px;"><canvas id="userRoleChart"></canvas></div></div></div></div>
                    <div class="col-lg-4"><div class="card shadow-sm mb-4 h-100"><div class="card-header">${t('dashboardAdminChartTopCoursesTitle', { count: topCoursesData.labels?.length ?? 0 })}</div><div class="card-body"><div class="chart-container" style="height: 260px;"><canvas id="topCoursesChart"></canvas></div></div></div></div>
                </div>
                <div class="row g-4 mt-1"> <div class="col-lg-12"><div class="card shadow-sm"><div class="card-header">${t('dashboardAdminChartCoursesPerProviderTitle')}</div><div class="card-body"><div class="chart-container" style="height: 50vh; min-height: 350px; max-height: 600px;"><canvas id="coursesPerProviderChart"></canvas></div></div></div></div> </div>
                `;

            fullContentHtml = ` ${pendingCoursesTable} ${statsHtml} ${chartsHtml} `;
            console.log("[renderAdminDashboard] STEP 2/3: Full HTML built.");

        } catch (fetchBuildError) { /* ... (keep error handling as before) ... */ console.error("[renderAdminDashboard] ERROR during STEP 2/3 (Data Fetch/Process/HTML Build):", fetchBuildError); const contentArea = document.getElementById('admin-dash-content-area'); if(contentArea) { $(contentArea).html(`<div class="alert alert-danger m-0" role="alert"><h4>${t('errorLoadingData')}</h4><p>${fetchBuildError.message}</p></div>`); } else { render(`<div class="alert alert-danger m-4">Error loading dashboard data.</div>`, true, false); } console.log("[renderAdminDashboard] Function END (due to data/build error)"); return; }

        // --- STEP 4: Replace placeholder ---
        console.log("[renderAdminDashboard] STEP 4: Scheduling content replacement...");
        setTimeout(() => {
            const contentArea = document.getElementById('admin-dash-content-area');
            if (contentArea && window.location.hash === '#admin-dashboard') {
                console.log("[renderAdminDashboard] STEP 4: Replacing placeholder content now.");
                $(contentArea).hide().html(fullContentHtml).fadeIn(200);

                // --- STEP 5: Initialize Charts ---
                console.log("[renderAdminDashboard] STEP 5: Scheduling chart initialization...");
                 requestAnimationFrame(() => {
                    setTimeout(() => {
                        if (window.location.hash === '#admin-dashboard') {
                            console.log("[renderAdminDashboard] STEP 5: Initializing charts.");
                            initializeAdminCharts(userCounts, coursesPerProvider, topCoursesData);
                        } else { console.log("[renderAdminDashboard] STEP 5: Hash changed, skipping chart init."); }
                    }, 30);
                 });
            } else { console.warn("[renderAdminDashboard] STEP 4: Cannot replace content (area not found or hash changed)."); }
        }, 0);

    } catch (mainError) {
        console.error("[renderAdminDashboard] Main try/catch block error:", mainError);
        render(`<div class="alert alert-danger m-4">Unexpected Dashboard Error: ${mainError.message}</div>`, true, false);
    }
    console.log("[renderAdminDashboard] Function END");
}


// --- Admin User Management Page ---
export function renderAdminUsersPage(){ console.log("[renderAdminUsersPage] Function START"); try { toggleAdminSidebar(true); destroyAllAdminCharts(); const users = store.getUsers(); console.log(`[renderAdminUsersPage] Found ${users.length} users.`); const userRowsHtml = users.map(user => { if (!user) return ''; let roleBadgeClass = 'bg-secondary', roleTextClass = ''; const roleKey = `role${user.role ? user.role.charAt(0).toUpperCase() + user.role.slice(1) : 'Unknown'}`; switch(user.role) { case 'admin': roleBadgeClass = 'bg-danger'; break; case 'provider': roleBadgeClass = 'bg-info'; roleTextClass = 'text-dark'; break; case 'client': roleBadgeClass = 'bg-primary'; break; default: roleBadgeClass = 'bg-warning'; roleTextClass = 'text-dark'; break; } const joinedDate = user.createdAt ? formatDateTime(user.createdAt) : t('notAvailable'); return `<tr><td class="text-muted small ps-3"><code class="user-id">${user.id || t('notAvailable')}</code></td><td><i class="bi bi-person-fill text-muted opacity-75"></i> ${user.username || t('notAvailable')}</td><td><span class="badge rounded-pill ${roleBadgeClass} ${roleTextClass} text-capitalize px-3 py-1 fs-7">${t(roleKey, {}, user.role || 'Unknown')}</span></td><td>${joinedDate}</td><td class="text-end"><button class="btn btn-sm btn-outline-secondary disabled me-1" title="${t('featureNotAvailable')}"><i class="bi bi-pencil-square"></i></button><button class="btn btn-sm btn-outline-danger disabled" title="${t('featureNotAvailable')}"><i class="bi bi-trash"></i></button></td></tr>`; }).join(''); const contentHtml = `<div data-page-title-key="adminUsersTitle"></div> <div class="fade-in"> <div class="d-flex justify-content-between align-items-center pt-3 pb-2 mb-3 border-bottom"> <h1 class="h2"><i class="bi bi-people-fill me-2"></i>${t('adminUsersTitle')}</h1> <button class="btn btn-sm btn-primary disabled" title="${t('featureNotAvailable')}"><i class="bi bi-plus-circle me-1"></i> ${t('adminUsersAddButton')}</button> </div> <div class="card shadow-sm"> <div class="card-header d-flex justify-content-between"> <span>${t('adminUsersListTitle')}</span> <span class="badge bg-light text-dark rounded-pill">${t('adminUsersTotal', { count: users.length })}</span> </div> <div class="table-responsive"> <table class="table table-hover table-striped table-vcenter mb-0"> <thead class="table-light"><tr><th class="ps-3">${t('adminUsersHeaderId')}</th><th>${t('adminUsersHeaderUsername')}</th><th>${t('adminUsersHeaderRole')}</th><th>${t('adminUsersHeaderJoined')}</th><th class="text-end">${t('adminUsersHeaderActions')}</th></tr></thead> <tbody>${users.length > 0 ? userRowsHtml : `<tr><td colspan="5" class="text-center text-muted p-4">${t('adminUsersNoUsers')}</td></tr>`}</tbody> </table> </div> ${users.length > 20 ? `<div class="card-footer text-muted small text-center">(${t('paginationNotAvailable')})</div>` : ''} </div> </div>`; render(contentHtml, true, false); console.log("[renderAdminUsersPage] Render complete."); } catch(e) { console.error("Error rendering admin users page:", e); renderTemporaryMessage('errorRenderingView', 'danger'); } console.log("[renderAdminUsersPage] Function END"); }


// --- Admin Course Management Page ---
export function renderAdminCoursesPage() { console.log("[renderAdminCoursesPage] Function START"); try { toggleAdminSidebar(true); destroyAllAdminCharts(); const courses = store.getCourses('all'); console.log(`[renderAdminCoursesPage] Found ${courses.length} courses.`); const courseRowsHtml = courses.map(course => { if (!course) return ''; const provider = store.findUserById(course.providerId); const enrollmentCount = course.enrolledStudentIds?.length || 0; const price = parseFloat(course.price); const priceFormatted = (isNaN(price) || price <= 0) ? t('browseCoursesPriceFree') : `${price.toFixed(0)} ${t('currencySymbol', {}, 'MAD')}`; const priceClass = (isNaN(price) || price <= 0) ? 'text-primary fw-semibold' : 'text-success fw-bold'; const createdDate = course.createdAt ? formatDateTime(course.createdAt) : t('notAvailable'); let statusBadge = ''; let actionButtons = ''; switch(course.status) { case 'pending': statusBadge = `<span class="badge bg-warning text-dark">${t('statusPending', {}, 'Pending')}</span>`; actionButtons = `<button class="btn btn-sm btn-success approve-course-button me-1" data-course-id="${course.id}" title="${t('adminApproveAction', {}, 'Approve')}"><i class="bi bi-check-lg"></i></button><button class="btn btn-sm btn-danger reject-course-button" data-course-id="${course.id}" title="${t('adminRejectAction', {}, 'Reject')}"><i class="bi bi-x-lg"></i></button>`; break; case 'approved': statusBadge = `<span class="badge bg-success">${t('statusApproved', {}, 'Approved')}</span>`; actionButtons = `<button class="btn btn-sm btn-secondary reject-course-button" data-course-id="${course.id}" title="${t('adminRejectAction', {}, 'Reject')}"><i class="bi bi-x-lg"></i></button>`; break; case 'rejected': statusBadge = `<span class="badge bg-danger">${t('statusRejected', {}, 'Rejected')}</span>`; actionButtons = `<button class="btn btn-sm btn-warning approve-course-button" data-course-id="${course.id}" title="${t('adminApproveRejectedAction', {}, 'Re-Approve')}"><i class="bi bi-arrow-clockwise"></i></button>`; break; default: statusBadge = `<span class="badge bg-secondary">${t('statusUnknown', {}, 'Unknown')}</span>`; break; } const combinedActions = `<div class="btn-group btn-group-sm">${actionButtons}<a href="#course-detail/${course.id}" class="btn btn-outline-primary" title="${t('viewAction')}"><i class="bi bi-eye"></i></a><button class="btn btn-outline-danger delete-course-button" data-course-id="${course.id}" title="${t('courseDetailDeleteButton')}"><i class="bi bi-trash"></i></button></div>`; return `<tr><td class="text-muted small ps-3"><code class="course-id">${course.id || t('notAvailable')}</code></td><td>${course.title || t('untitledCourse')}</td><td>${provider ? provider.username : `<span class="text-muted fst-italic">${t('unknownProvider')}</span>`}${provider ? `<code class="ms-1 small provider-id">(${provider.id})</code>` : ''}</td><td class="text-end fw-bold ${priceClass}">${priceFormatted}</td><td class="text-center">${enrollmentCount}</td><td>${statusBadge}</td><td>${createdDate}</td><td class="text-end">${combinedActions}</td></tr>`; }).join(''); const contentHtml = `<div data-page-title-key="adminCoursesTitle"></div> <div class="fade-in"> <div class="d-flex justify-content-between align-items-center pt-3 pb-2 mb-3 border-bottom"> <h1 class="h2"><i class="bi bi-journal-bookmark-fill me-2"></i>${t('adminCoursesTitle')}</h1> </div> <div id="course-action-alert" class="alert d-none my-3" role="alert"></div> <div class="card shadow-sm"> <div class="card-header d-flex justify-content-between"> <span>${t('adminCoursesListTitle')}</span> <span class="badge bg-light text-dark rounded-pill">${t('adminCoursesTotal', { count: courses.length })}</span> </div> <div class="table-responsive"> <table class="table table-hover table-striped table-vcenter mb-0"> <thead class="table-light"><tr><th class="ps-3">${t('adminCoursesHeaderId')}</th><th>${t('adminCoursesHeaderTitle')}</th><th>${t('adminCoursesHeaderProvider')}</th><th class="text-end">${t('adminCoursesHeaderPrice')}</th><th class="text-center">${t('adminCoursesHeaderEnrollments')}</th><th>${t('adminCoursesHeaderStatus', {}, 'Status')}</th><th>${t('adminCoursesHeaderCreated')}</th><th class="text-end">${t('adminCoursesHeaderActions')}</th></tr></thead> <tbody>${courses.length > 0 ? courseRowsHtml : `<tr><td colspan="8" class="text-center text-muted p-4">${t('adminCoursesNoCourses')}</td></tr>`}</tbody> </table> </div> ${courses.length > 20 ? `<div class="card-footer text-muted small text-center">(${t('paginationNotAvailable')})</div>` : ''} </div> </div>`; render(contentHtml, true, false); console.log("[renderAdminCoursesPage] Render complete."); } catch(e) { console.error("Error rendering admin courses page:", e); renderTemporaryMessage('errorRenderingView', 'danger'); } console.log("[renderAdminCoursesPage] Function END"); }